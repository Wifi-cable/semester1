Java notizen 

    die Basics. 
    
-ein java file besteht aus einem odner mit verschiedenen datein/files. dem quellcode oder source code ansich, einer oder mehereren class datei (und warscheinlich noch mehr)
    
-alles kann "verpackt" werden. damit man keine 30 dateien/files mehr hat und das ganze besser verschicken oder verwenden kann. zum bearbeiten ist es aber besser wenn es einzelne datein oder files sind. (jar -cfe beispiel.jar)
    
-source path geht zu den quelldateien oder source code in englisch

-java archiver  baut java archive.

-classpath führt zu den .class datein. zb main-methode (speichert classen, oder kategorien und deren bezeichnungen) die sind aber nur was für den compiler
nicht für den user.( .class-claspath bin;C:\lib)

-compiler baut aus java source code class dateien die dann in bite code sind? und geziped also kompremiert(jarvac -d bin beispiel.java)

- interpreter macht die class dateien ausfürbar. 

-leider unterscheide Java in gross und klein schreibung. ich mache das ja ungerne.

-schlüsselworte werden immer zusammen geschrieben zb "sagHallo" ohne bindestriche und ohne leehrzeichen.

// dieser text dient kommentaren er wird nicht im programm bearbeitet. nur im quellcode angezeigt. das ist gut um code zu kommentieren;

/* kommentar*/ funtioniert auch. das ist gut für kommentare die länger als eine zeile sind.

das semicolon ; beended ein argument oder die kommentar zeile.

System.out.println("hallo");  ist java code der "hallo" anzeigt. das System.out.print steht für "print to screen" oder anzeigen 

das  ln steht für "line" oder zeile. 

System.out.print("____"); geht auch. es hatt dann keinen zeilen umbruch 

{} schiesst einen "block" ein. also eine argumentationskette, oder mehrere zusammengefasste anweisungen.

    einrücken hilft der leesbarkeit, aber es hat keine bedeutung für den
    computer. dem ist es egal,  den proffesoren warscheinlich nicht-

arags[0] erster eingabewert. (etwas das man als imput eingeben kann und mit dem java dann arbeitet) es wird bei 0 angefangen zu zälen. ist komisch, machen andere programiersprachen aber auch so. 

Jar ist eine archiv datei

-variablen 
      (im mathe ist das oft X als platzhalter für eine zahl) es gibt
        verschiedene datentypen von variablen. zb strings (buchstabenketten)
        und sie brauchen einen namen damit man sie unterscheiden und geplahnt
        aufrufen kann. man kann darin sozusagen daten speichern.
        
    class HalloWelt {
    public static void main(strings[] args){
        String satz = "hallo welt!";
        System.out.println(satz);
        }
    }
hier gibt es die variable "satz" die oben als strung deffiniert wurde.  das istgleich zeichen macht benennt die variable.  die gänsefüsschen grenzen sie wieder ein. bei dem print statement sieht man das die variable aufgerufen wird und das sie nicht ausgetippt werden muss.(praktisch wenn man etwas öfter braucht.

-strings
       können auch verknüpft werden mit einem +.  also z.b.
       ("string1"+"string2"); das ist gut weil es sontzt einen error gibt wenn
       ein text länger als eine zeile sein soll. wichtig an die leerzeichen
       denken. sontzt hat man ein mega bandwurm-wort.

public class kann von anderen methoden aufgerufen werden. wichtig ist das der
    name gross geschrieben werden muss. der name muss mit dem name der datei
    identisch sein. andere classes (klassen) sind in der selben datei möglich
    die müssen aber anders heissen, und dürfen (warscheinlich) nicht public
    sein.(schlechter stiel)
    
static oder auf deutsch statisch
    
variablen typen
    -boolean (bolean hungrig  also true/false)
    -int integer oder ganze zahl (positiv und negativ)
    -double zahlen mit comma mit punkt statt komma weil amerik. schreibeweise
    -char (character) buchstabe oder zeichen (mit einem 'x') begrenzen
    -String zeichenkette wörte etc.
    
    public class HalloWelt {
    public static void main(String[] args) {
        String Hi = "Willkommen";
        System.out.println(Hi);
    }
}

wichtig, String und System out gross schreiben. beides zwischen die geschwungenen klammern. befor die varable fest gelegt wird java sagen was für ein varibablen typ. in dem fall String.

wen eine variable in eine string eingefügt werden soll muss das so aussehen ("string" +varable+ "string"); das letzte pluss ist wichig.
    
bei zahlen die man dividieren will ist es wichtig eine null dahinter zu stellen. also statt 2 eine 2.0 und das als double zu deklarieren.

int x *=3; bedeutet die zahl die in variable x gespeichert ist mal drei

int y++; bedeutet die zahl in variable y plus 1. gut zum hochzälen.

short
        ist änlich wie integer (int) bedeutet 16 bit zahlen hexadecimal um das
        dazustellen muss eine 0x vor die zahl gestellt werden.(für oct muss
        eine    0 vor die zahl)

long 
     ist auch ähnlich wie ingeger(int) für 64 bit zahlen. braucht aber mehr
     speicher platz.

double 
    für komma zahlen ist der genauste datentyp. braucht aber viel mehr
    speicherplatz als float

float 
    ist auch ein daten typ für zahlen. nur 4 bit, also nicht so genau wie
    double, muss als socher deklariert werden und braucht ein F dahinter. zb  
    float a = 1.00f; 

object
    sind in classes drinn. mehere objecte können in der selben class sein. zb
    der papagei "alex" ist ein object der klasse papagei. um einen zweiten
    papagei zu bekommen schreibt man ohne anfürhugsteichen "papagei alex
    = new Papagei();" objecte können mehtoden aufrufen, oder verhalten (code
    schnipsel namens methode benutzen wenn es in der selben class ist)
    das object von dem man was will, erhält eine anforderung eine bestimmte 
    methode auszufüren oder den wert einer eigenschaft zu setzen. zb in der
    Main mthode werden die "fremden" objecte dann gross geschrieben, mit neuem
    variablen namen versehen und dahinter kommt ein "=new" dahinter dann der
    name des objectes (wieder gross) gefolgt von einer klammer und einem
    semicolon. so... (); 
    
    sie werden klein geschrieben

class.
     sind seperate java files! 
     etwas das dinge im code zusammenfasst das in der realen welt zusammen
     gehört. sie können frei deffiniert werden wie in CSS. zb "papagei" oder
     "menue leiste". eine class kann viele "objects" endhalten wie eine
     art container, oder eine box mit bauplänen für objecte. 
     
     -classen und objecte dürfen NICHT den selben namen wie das package haben.
     keine sonderzeichen in den namen und keine lerzeichen. cammelCase geht.sie
     dürfen auch nicht wie eine java schlüsselwort heissen. zb nicht String.
     sie müssen immer gross geschrieben werden und sollten die funktion
     beschreiben. zb OkButton für den knopf(button) auf dem ok steht, und seine
     funktionen wenn man ein programm schreibt das am ende eine
     benutzeroberfläche haben soll. 
     
     public oder öffendliche klassen müssen den selben namen haben wie die java
     datei. zb "public class Klasse1" muss in einer java datei stehen die
     Klasse1.java steht. 
     bei einer klasse vor der nicht public steht ist das egal.
     es können verschiedene klassen in der selben java datei sein, aber die
     müssen dann natürlich anders heissen und dürfen nicht public sein.
     für jede klasse eine neue datei zu nehen ist aber sauberer. (und nicht
     so bugg anfällig, oder so schwer zu lesen)
     
main 
    die main methode wird als erstes aufgerufen. wenn es meherer main methoden 
    in dem selben ordern oder packeage existieren gibt das probleme. sauberer ist
     es wenn nicht nur seperate klassen in seperaten files sind sondern die auch
      keine main methode haben. 

mehtode
     das verhalten oder die dinge die eine classe tuhen sollte. (wenn bug frei)
     zb das "sagt hallo" in der class "papagei" ist eine methode. void steht
     davor, dann wie die methode heist. verschiedene programm teile können auf
     die vorher deffienierten methoden zugreifen. (man muss sie nicht dauernt
     neu tippen oder copieren und einfügen) beispiel: void sagHallo (){...}  am
     besten eine neue zeile nehmen und einrücken für das was die methode machen
     soll. 
     auch anfangs klein geschriebn
     
methoden werden aufgerufen in dem man den "object name.methoden name" schreibt. wobei es 
null sinn macht alle objecte "object1 object2" zu nennen. mann sollte schon später noch
 wissen was die objecte sind. das selbe gild für die methoden. z.b.  alex.sagHallo();

die reihnefolge und der ort der dekleration von variablen in einer klasse, spielt in java
 keine rolle. aber sie alle davor zu deffinieren ist schon praktischer weil übersichtlicher

^ EXOR in java funktiniert ansich so wie in der bolerischen schaltalgebra 

% modulo sieht nach ob sich was ohne rest teilen lässt. 

/ teilt  zb 2/3 

array  der syntax ist  z.b.
    int whateverArray[] 
    in die eckigen klammern kommt die grösse des arrays. sie können ihre grösse
    auch anpassen an zb strings so das sie immer passen. [bin.length()];
    ansich kann man auch  arrays verschachteln
    
schleifen    


return für einen rückgabe wert.


recursion wenn eine funktion sich selbst aufruft, oder eine andere aufruft die sich seblst aufruft die variablen 
    verändern sich dabei meistens ist eine fall unterscheidung dabei. zb if... return.  ist wie ein kreislauf der weiter 
    läuft bis ein ziehl erreicht ist.  oder wie eine spirale. 
    
sort algorythems. davon gibt es so einige. 
    einer vergleicht die unterste eines stapels mit allen anderen um zu sehen 
    ob sie die kleinste ist. vertauschen mit der stelle darüber wenn die darüber kleiner ist. (sorting stacks)
    [5] [4] [leer] fünf ist nicht kleiner als 4
    [leer] [4] [5] fünf auf den leeren platz
    [4] [leer] [5] vier auf den jetzt leer gewordennen ersten platz
    [4] [5]  [leer] fünf auf den mittleren, leer gewordennen platz. 
    wie das lager von hanoi.
    
searc for index position. (binary seach?)  index = (min+max)/2; mitte durchsuchen und nachsehen ob das gesuchte gleich der
     positionist,  grösser ist oder kleiner. (if abfrage) wenn x grösser 
     ist dann über der mitte weiter suchen. wenn kleiner dann in der
     unteren häfte. sontzt ist es schon gefunden. return statement sind
     wichtig damit es keine endloos schleife wird. auch ein else wenn
      das gesuchte nicht endhalten ist würde sinn machen.
      
      kann rektusiv gelöst werden aber das gibt erstuanlich schnell einen 
      stack overflow;) min und max sind ausgeschlossen es sei denn man sagt
      (numberToFind> index-1) bz (NumberTOFind <index +1)
      
declaration schreiben von eigenschaften/atributen und methoden in einer klasse
    nennt man declaration.

    
