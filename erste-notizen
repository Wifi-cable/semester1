Java notizen 

    die Basics. 
    
-ein java file besteht aus einem odner mit verschiedenen datein/files. dem quellcode oder source code ansich, einer oder mehereren class datei (und warscheinlich noch mehr)
    
-alles kann "verpackt" werden. damit man keine 30 dateien/files mehr hat und das ganze besser verschicken oder verwenden kann. zum bearbeiten ist es aber besser wenn es einzelne datein oder files sind. (jar -cfe beispiel.jar)
    
-source path geht zu den quelldateien oder source code in englisch

-java archiver  baut java archive.

-classpath führt zu den .class datein. zb main-methode (speichert classen, oder kategorien und deren bezeichnungen) ( .class-claspath bin;C:\lib)

-compiler baut aus java source code class dateien die dann in bite code sind? und geziped also kompremiert(jarvac -d bin beispiel.java)

- interpreter macht die class dateien ausfürbar. 

-leider unterscheide Java in gross und klein schreibung. ich mache das ja ungerne.

// dieser text dient kommentaren er wird nicht im programm bearbeitet. nur im quellcode angezeigt. das ist gut um code zu kommentieren;

/* kommentar*/ funtioniert auch. das ist gut für kommentare die länger als eine zeile sind.

das semicolon ; beended ein argument oder die kommentar zeile.

System.out.println("hallo");  ist java code der "hallo" anzeigt. das System.out.print steht für "print to screen" oder anzeigen 

das  ln steht für "line" oder zeile. 

System.out.print("____"); geht auch. es hatt dann keinen zeilen umbruch 

arags[0] erster eingabewert. (etwas das man als imput eingeben kann und mit dem java dann arbeitet) es wird bei 0 angefangen zu zälen. ist komisch, machen andere programiersprachen aber auch so. 

Jar ist eine archiv datei

-variablen (im mathe ist das oft X als platzhalter für eine zahl) es gibt verschiedene datentypen von variablen. zb strings (buchstabenketten) und sie brauchen einen namen damit man sie unterscheiden und geplahnt aufrufen kann. man kann darin sozusagen daten speichern.
    class HalloWelt {
    public static void main(strings[] args){
        String satz = "hallo welt!";
        System.out.println(satz);
        }
    }
hier gibt es die variable "satz" die oben als strung deffiniert wurde.  das istgleich zeichen macht benennt die variable.  die gänsefüsschen grenzen sie wieder ein. bei dem print statement sieht man das die variable aufgerufen wird und das sie nicht ausgetippt werden muss.(praktisch wenn man etwas öfter braucht.

-strings können auch verknüpft werden mit einem +.  also z.b. ("string1 "+"string2 ");  wichtig an die leerzeichen denken. sontzt hat man ein mega bandwurm-wort.

variablen typen
    -boolean (bolean hungrig  also true/false)
    -int integer oder ganze zahl (positiv und negativ)
    -double zahlen mit comma mit punkt statt komma weil amerik. schreibeweise
    -char (character) buchstabe oder zeichen (mit einem 'x') begrenzen
    -string zeichenkette wörte etc.
    
bei zahlen die man dividieren will ist es wichtig eine null dahinter zu stellen. also statt 2 eine 2.0 und das als double zu deklarieren.

int x *=3; bedeutet die zahl die in variable x gespeichert ist mal drei
int y++; bedeutet die zahl in variable y plus 1. gut zum hochzälen.
